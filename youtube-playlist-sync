#!/bin/bash

declare -A TODO
TODO['writeLocalPlaylist']="writeLocalPlaylist() is disabled, because its regular expression pattern used to find the video IDs no longer matches the contents of the page. 2021-01-21"
{ # functions
  feedback() {
    1>&2 echo "$@"
  }

  whisper() {
    [[ $verbose = true ]] && feedback "$@"
  }

  todo() { # Created 2021-01-21
    note="$1"
    [[ -n "${TODO[$note]}" ]] && note="${TODO[$note]}"
    whisper "TODO: $note"
  }

  showHelp() {
    feedback -e \
      "\n  -l URL  Playlist URL (required). You can use this option multiple times to add multiple lists to one collection." \
      "\n  -d DIR  Path to the directory in which to download the files. (required)" \
      "\n  -f FMT  Choose the format (FMT) to download. See FORMAT SELECTION in the youtube-dl manual." \
      "\n  -h      Show this help." \
      "\n  -a EXT  Convert downloaded files to anaudio format (generally 'ogg', or 'mp3')." \
      "\n  -v      Show verbose output, though logs on file will still be concise (this is useful for debugging, or if you want to save the full output yourself." \
      "\n  -x MAX  Maximum number of files to keep. Default is no limit, equivalent to '-x 0'. The files to be deleted are matched by globbing on all but the last N lines of youtube-dl-archive." \
      "\n\n  Any further options will be passed directly to youtube-dl."
  }

	nice() {
		cat | perl -pe 's/[^A-Za-z0-9-]+/_/g | s/_$//'
	}

	log() {
		local file="$1"
		local prefix="$2"
    if [[ -n "$prefix" ]]; then
      sed "s|^|[${prefix}] |" | { # using pipes `|` as regex delimiters, as they're unlikely to be in the $prefix (2021-01-22).
        if [[ $verbose = true ]]; then
          tee -a "$file"
        else
          cat >> "$file"
        fi
      }
    else
      if [[ $verbose = true ]]; then
        tee -a "$file"
      else
        cat >> "$file"
      fi
    fi
	}

  # # Gets JSON data for all videos in the playlist, not for the playlist
  # # itself.
  # # The result is not collected into an array: just JSON objects separated by
  # # newlines.
  # getPlaylistDataJson() {
  #   youtube-dl -j "$1"
  # }

  getVideoIdsFromPlaylistJson() {
		todo "Where are the videos?" # 2021-01-22 upgrading comment to log
    echo "$1" | json
  }

	downloadVideoFiles() {
		local playlistUrl flag OPTARG OPTIND

    local youtubeDlOptionOverrides=()

    flag=''
    for arg in "$@"; do
      if [ -n "$flag" ]; then
        case $flag in
          u) playlistUrl="$arg";;
        esac
        flag=''
      else
        case $arg in
          -u) flag="u";;
          *) youtubeDlOptionOverrides+=("$arg");;
        esac
      fi
    done
		shift $((OPTIND - 1))

    local youtubeDlOptions=()

    [[ $verbose = true ]] && youtubeDlOptions+=(--verbose)

    [[ -n $audioFormat ]] && youtubeDlOptions+=(--extract-audio --audio-format "$audioFormat")

    # [[ $maxFiles != 0 ]] && youtubeDlOptions+=(--playlist-reverse --max-downloads "$maxFiles")

    # download 2 videos:
    # 1. simply the best video + audio
    # 2. best video smaller than 1080 (for playback on phone, weaker device) + best audio
    youtubeDlOptions+=(--format "$format")

    # keep track of which media have been dowloaded, so that they can be
    # skipped when checking the playlist again. Also avoid overwriting files if
    # re-downloading a file (by removing or commenting it out from the archive
    # log).
    youtubeDlOptions+=(--download-archive "$downloadArchivePath" --no-overwrites)

    youtubeDlOptions+=(--no-progress --no-color --no-call-home)

    # 2021-01-12T13:42:27-0800 re-enabling warnings/errors, for debugging
    # youtubeDlOptions+=(--no-warnings --ignore-errors)

    youtubeDlOptions+=(--write-sub --write-auto-sub --embed-subs --sub-format srt) # take what we can get

    # --output template: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#output-template
    if ! [[ "$*" =~ '--output ' ]]; then
      youtubeDlOptions+=(--output '%(upload_date)s.%(uploader)s.%(title)s.id,%(id)s.%(ext)s')
      youtubeDlOptions+=(--restrict-filenames)
    fi

    youtubeDlOptions+=(--metadata-from-title "%(artist)s - %(title)s")
    # Disabling 2021-05-21 (unused) # youtubeDlOptions+=(--print-json) # EXPERIMENTAL 2021-02-01

    echo "adding (${#youtubeDlOptionOverrides[@]}) youtubeDlOptionOverrides(${youtubeDlOptionOverrides[*]})"
    [[ ${#youtubeDlOptionOverrides[@]} -gt 0 ]] && youtubeDlOptions+=("${youtubeDlOptionOverrides[@]}")

    cd "$destinationDirectory"

		local youtubeDlCommand=(youtube-dl "${youtubeDlOptions[@]}" "$playlistUrl")
    echo \$ "${youtubeDlCommand[@]}" | log "$tmpLogFile"
    if [[ $verbose = true ]]; then
      "${youtubeDlCommand[@]}" 2>&1 | log "$tmpLogFile" 'youtube-dl'
    else
      "${youtubeDlCommand[@]}" | log "$tmpLogFile" 'youtube-dl'
    fi

    if grep 'Download completed' "$tmpLogFile" &>/dev/null; then
      # remove unnecessary lines from log
      cat "$tmpLogFile" |
        perl -pe 's/.*Downloading.*\n.*already been recorded.*\n//' |
        log "$logFile"
    else
      echo "No new files" | log "$logFile"
    fi

		rm "$tmpLogFile"

    echo -e "finished playlist download $(date --iso-8601=seconds)" | log "$logFile"
  }

  deleteOlderThanN() {
    local maxFiles=$1
    local archiveFilePath="$2"
    local downloadsDirPath="$3"
    local idsToDelete=($(grep -v '^\s*#' "$archiveFilePath" | cut -d' ' -f2 | head -n -$maxFiles))
    local totalDeleted=0
    for i in "${idsToDelete[@]}"; do
      rm "$downloadsDirPath/"*"$i"* &&
      let totalDeleted++
    done
    echo "Deleted $totalDeleted old files (to maintain limit of $maxFiles)." >&2
  }

	writeLocalPlaylist() {
    todo writeLocalPlaylist; return 1

		local playlistUrl flag OPTARG OPTIND
		while getopts l:u: flag; do
			case $flag in
				u) playlistUrl="$OPTARG";;
			esac
		done
		shift $((OPTIND - 1))

		feedback "Creating local playlist, mirroring remote."

    cd "$destinationDirectory"

    # local youtubeDlOptions=(--get-id)
		# local youtubeDlCommand=(youtube-dl "${youtubeDlOptions[@]}" "$playlistUrl")
		# feedback "${youtubeDlCommand[@]}"
		local playlistPageData="$(curl -s "$playlistUrl")"
    whisper "$playlistPageData" # 2021-01-21T22:45:39-0800
		local playlistTitle="$(echo -e "$playlistPageData" | grep '<title>' | perl -pe 's/^.*<title>([^<]+?)( - YouTube)?<\/title>.*/\1/')"
		local localPlaylistPath="$destinationDirectory/$(echo "$playlistTitle" | nice).m3u8"
		local videoIds=($(echo -e "$playlistPageData" | grep '<tr.*watch?v=' | perl -pe 's/^.*watch\?v=([^&]+).*/\1/'))

		feedback "playlistTitle: $playlistTitle"
		feedback "localPlaylistPath: $localPlaylistPath"
		feedback "videoIds: ${videoIds[*]}"

		local id localFile
		local localFiles=()
		for id in "${videoIds[@]}"; do
			localFile="$(ls *".$id."* 2>/dev/null)"
			[[ -n "$localFile" ]] && localFiles+=("$localFile")
		done

		if [[ ${#localFiles[@]} -gt 0 ]]; then
			local playlistData
			IFS=$'\n' playlistData="${localFiles[*]}"
			echo "$playlistData" > "$localPlaylistPath"
		fi
  }
}

{ # main
  audioFormat=
  maxFiles=0
	shouldDownloadVideos=true
  playlistUrls=()
  verbose=false

  # download best (audio + video) at largets dimension _and_ 1080p (for not-awesome hardware)
  # https://github.com/rg3/youtube-dl/blob/master/README.md#format-selection
  # slashes: download one of the list of formats, prefering those first
  # commas: download multiple formats
  # parentheses: group selectors
  # square brackets: format condition
  format='bestvideo+bestaudio,bestvideo[height<=1080]+bestaudio'

  downloadOptions=()

  while getopts :a:d:Df:hl:n:vx: flag; do
    case $flag in
      a) audioFormat="$OPTARG";;
      d) destinationDirectory="$OPTARG";;
      D) shouldDownloadVideos=false;;
      f) format="$OPTARG";;
      h) showHelp;;
      l) playlistUrls+=("$OPTARG");;
      v) verbose=true;;
      x) maxFiles="$OPTARG";;
      *) downloadOptions+=("$flag");;
    esac
  done
  [[ $OPTIND -gt 1 ]] && shift $((OPTIND - 1))

  [[ $# -gt 0 ]] && downloadOptions+=("$@")

  [[ -n "${playlistUrls[*]}" && -n "$destinationDirectory" ]] || { showHelp; exit 1; }

  pidFile="$HOME/.youtube-playlist-sync.pid"
  if [[ -f "$pidFile" ]]; then
    feedback "An instance of youtube-playlist-sync is already running ($(cat "$pidFile"). If this is mistaken, delete '$pidFile'."
    exit 2
  fi

  echo $$ > "$pidFile"

  metadataDirectory="$destinationDirectory/.youtube-playlist-sync"
  mkdir -p "$metadataDirectory"
	downloadArchivePath="$metadataDirectory/youtube-dl-archive"
	logFile="$metadataDirectory/download.log"
	tmpLogFile="$logFile.tmp"

	echo -e "\nstarting playlist download $(date --iso-8601=seconds)\n$playlistUrl" | log "$logFile"

  for playlistUrl in "${playlistUrls[@]}"; do
    echo "$playlistUrl" > "$metadataDirectory/playlist.url"

		[[ $shouldDownloadVideos = true ]] && downloadVideoFiles -u "$playlistUrl" "${downloadOptions[@]}"

    [[ $maxFiles -gt 0 ]] && deleteOlderThanN $maxFiles "$downloadArchivePath" "$destinationDirectory"

		writeLocalPlaylist -u "$playlistUrl" | log "$logFile"
  done

	[[ -f "$tmpLogFile" ]] && rm "$tmpLogFile"
  rm "$pidFile"
}
