#!/bin/bash

showHelp() {
  echo "USAGE: gb [-h] [GIT COMMAND] [<bundle_path>|<bundle_dir>] [<other_git_arguments>]]"
  echo "	-e encrypt using bcrypt (WARNING: bcrypt is outdated; better to not use this, and encrypt in a separate step)"
  echo "	-h show this help"
  echo ""
  echo "GIT COMMAND: e.g. fetch | pull | clone"
  echo ""
  echo "EXAMPLES:"
  echo "gb clone ~/Dropbox/work.bundle.bfe ~/work"
  echo "gb pull ~/Dropbox/work.bundle.bfe"
  echo "gb -e #creates a bundle in GIT_BUNDLE_DIR ($GIT_BUNDLE_DIR)"
  echo ""
  echo "BUGS:"
  echo "- Currently only works with remotes accessible on the same file system (no rsync/ssh/sftp)."
}

canon_local() {
  # copied from [canon](/home/clo/tent/bin/canon "d:id=01kxCnV&md5=59024cd0c136f6cc8387d3b68a177d65&time-modified=2020-07-09T18:33:57Z&size=730")
  cwd="$PWD"
  for targetFile in "$@"; do
    cd "$cwd"
    cd "$(dirname "$targetFile")" 2>/dev/null || continue
    targetFile="$(basename "$targetFile")"

    # Iterate down a (possible) chain of symlinks
    while [ -L "$targetFile" ]
    do
      targetFile="$(readlink "$targetFile")"
      cd "$(dirname "$targetFile")"
      targetFile="$(basename "$targetFile")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    physDir="$(pwd -P)"
    result=$physDir/
    if [ ! "$targetFile" = "." ]; then
      result="$result$targetFile"
    fi
    if [ -t 1 ]; then
      echo "$result"
    else
      printf "$result"
    fi
  done
}

cd_to_git_root() {
	cd "$(canon_local .)"
	cd "$(git rev-parse --show-cdup)"
}

# exit status codes
E_HELP=1
E_NOTGITDIR=2

# note the current working directory
cwd="$(pwd)"

# options/flags
skipPrompt=false
while getopts 'eh' flag; do
	case $flag in
		# e) encrypt=true;;
		h) showHelp >&2; exit $E_HELP;;
		y) skipPrompt=true;;
	esac
done; shift $(( OPTIND - 1 ))

cd_to_git_root
if [[ ! -e .git ]]; then
  echo "git $git_command must be run from a git working tree" >&2
  showHelp >&2
  exit $E_NOTGITDIR
fi

# if the first argument is not a file or directory, consider it a git command and take it out of the argument list.
if [[ ! -a "$1" ]]; then
	git_command=$1
	shift 1
fi

# digest arguments
remote="$1"
shift 1
git_args=($@)

# if no remote is specified, assume GIT_BUNDLE_DIR, or HOME, with confirmation.
if [[ -z $remote ]]; then
	[[ -d "$GIT_BUNDLE_DIR" ]] && remote="$GIT_BUNDLE_DIR" || remote="$HOME"
  if ! confirm-prompt "Create Git bundle at '$remote'?"; then
    showHelp >&2
    exit $E_HELP
  fi
fi

# we need to figure out the name of our remote, based on git working directory's name
if [[ -d "$remote" ]]; then
	working_dir_name=$(basename "$(pwd)")
	cd "$cwd"
	if [[ -d "$remote" ]]; then
		bundle_name="$working_dir_name.bundle"
		remote="$remote/$bundle_name"

		# if an encrypted version already exists, use that
		if [[ -f "$remote.bfe" ]]; then
			remote="$remote.bfe"
		fi
	fi
fi

# handle any mismatch in .bfe and -e usage
if [[ "$remote" =~ \.bfe$ ]]; then
	if [[ $encrypt != true ]]; then
		echo "The remote name ends in .bfe: encryption turned on."
		encrypt=true
	fi
elif [[ $encrypt = true ]]; then
	remote="$remote.bfe"
fi

# prepare to use a temporary, unencrypted remote
if [[ $encrypt = true ]]; then
	final_remote="$remote"
	remote="/tmp/$(basename ${remote/.bfe})"
fi

if [[ -z $git_command ]]; then # no command, making a bundle
	git_command="bundle create"
	git_args+=(--all --tags)
	writing=true
elif [[ $encrypt = true ]]; then # decrypt ahead of the git operation
	cp "$final_remote" "$remote.bfe"
	bcrypt "$remote.bfe"
fi

# "we are gathered here today..."
git $git_command "$remote" ${git_args[@]}

# encrypt after the operation
if [[ $encrypt = true ]]; then
	if [[ $writing = true ]]; then
		bcrypt "$remote"
		mv "$remote.bfe" "$final_remote"
	else
		rm "$remote"
	fi
	remote="$final_remote"
	unset final_remote
fi

echo "did: 'git $git_command' with '$remote'"

## tasks:
# - Show help, or at least confirmation prompt with description of effect, when run without arguments. (2021-01-06, id:01kxCcs)
# - Change bcrypt to gpg encryption, or similar. (2021-01-06, id: 01kxD6e)
